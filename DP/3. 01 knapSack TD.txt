// 0/1 knapSack_TD DP

#include<iostream>
#include<vector>
#include<cstring>
using namespace std;



int knapSack(vector<vector<int>> arr, int weight, int array_length)
{   
    int memo[array_length+1][weight+1];
    for(int i=0;i<=array_length;i++)
    {
        for(int j=0;j<=weight;j++)
        {
            if(i==0 || j== 0){
                memo[i][j]=0;
                }
            else if(arr[i-1][0]<=j)
            {
                memo[i][j]=max(arr[i-1][1]+ memo[i-1][j-arr[i-1][0]],
                                memo[i-1][j]);
                }
            else{
                memo[i][j]=memo[i-1][j];
                }
        }
    }
   return memo[array_length][weight];  
}    
    
 
//driver 

int main()
{
    //Initializing array
    vector<vector<int>> arr;//0-> Weight 1-> Value
    arr.push_back({1,1});//Pushing values into the 2D array.
    arr.push_back({2,11});
    arr.push_back({5,6});
    arr.push_back({7,9});
    int weight = 7;//knapSack max load
    int array_length = arr.size();
    cout<<"size is"<<array_length<<'\n';
    cout<<knapSack(arr,weight,array_length);
    return 0;
}